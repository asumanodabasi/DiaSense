@using DiabetProject.BLL.Data.Dto
@using DiabetProject.BLL.Data.Entities

@model List<DiagnosisDto>

@if (Model != null && Model.Any())
{
    <div class="container py-4">
        <div class="row">
            <div class="col-md-4">
                <div class="chart-card" onclick="showGraphModal('weight')" style="cursor:pointer;" data-type="weight">
                    <div class="chart-title">Weight Progress</div>
                    <canvas id="weightChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card" onclick="showGraphModal('bmi')" style="cursor:pointer;" data-type="bmi">
                    <div class="chart-title">BMI Progress</div>
                    <canvas id="bmiChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card" onclick="showGraphModal('glucose')" style="cursor:pointer;" data-type="glucose">
                    <div class="chart-title">Glucose Levels</div>
                    <canvas id="glucoseChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card" onclick="showGraphModal('hba')" style="cursor:pointer;" data-type="hba">
                    <div class="chart-title">HbA1cLevel Progress</div>
                    <canvas id="hbaChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card" onclick="showGraphModal('pre')" style="cursor:pointer;" data-type="pre">
                    <div class="chart-title">Predict Progress</div>
                    <canvas id="preChart"></canvas>
                </div>
            </div>
        </div>
    </div>

}

else
{
    <p>No data available.</p>
}


<div class="modal fade" id="graphModal" tabindex="-1" aria-labelledby="graphModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="graphModalLabel">Detaylı Görünüm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <canvas id="modalChart" style="max-height:400px;"></canvas>
                <div id="healthWarning" class="mt-3 fw-bold text-danger"></div>
            </div>
        </div>
    </div>
</div>


 
@section scripts {
  
    <script>
        

        function createChart(ctxId, label, data, color, labels) {
            const ctx = document.getElementById(ctxId).getContext('2d');
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: label,
                        data: data,
                        fill: true,
                        borderColor: color,
                        backgroundColor: color + '22',
                        tension: 0.4,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                    }]
                },
                options: {
                    responsive: true,
                    animation: {
                        duration: 1000,
                        easing: 'easeOutQuart'
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function initializeCharts(chartData) {
            const labels = chartData.map(x => new Date(x.createdAt).toLocaleDateString());
            const weightData = chartData.map(x => x.weight);
            const bmiData = chartData.map(x => x.bmi);
            const glucoseData = chartData.map(x => x.blood_glucose_level);   /* model ile eslesen kısım */
            const hbaData = chartData.map(x => x.HbA1c_level);
            const preData = chartData.map(x => x.predict);

            weightChart = createChart("weightChart", "Weight (kg)", weightData, "#42a5f5", labels);
            bmiChart = createChart("bmiChart", "BMI", bmiData, "#66bb6a", labels);
            glucoseChart = createChart("glucoseChart", "Blood Glucose", glucoseData, "#ef5350", labels);
            hbaChart = createChart("hbaChart", "HbA1c_level", hbaData, "#ff9933", labels);
            preChart = createChart("preChart", "Prediction", preData, "#cc99ff", labels);
        }

       

        // İlk veriyi Razor'dan al ve grafik başlat
        const chartData = @Html.Raw(Json.Serialize(Model ?? new List<DiagnosisDto>()));
        initializeCharts(chartData);

       
            let modalChartInstance;

        function showGraphModal(type) {
            const chartMap = {
                weight: { label: "Weight (kg)", color: "#42a5f5", data: chartData.map(x => x.weight) },
                bmi: { label: "BMI", color: "#66bb6a", data: chartData.map(x => x.bmi) },
                glucose: { label: "Blood Glucose", color: "#ef5350", data: chartData.map(x => x.blood_glucose_level) },
                hba: { label: "HbA1c Level", color: "#ff9933", data: chartData.map(x => x.HbA1c_level) },
                pre: { label: "Prediction", color: "#cc99ff", data: chartData.map(x => x.predict) }
            };

            const labels = chartData.map(x => new Date(x.createdAt).toLocaleDateString());
            const chartInfo = chartMap[type];
            const lastValue = chartInfo.data[chartInfo.data.length - 1];

            // Modal grafiği resetle
            if (modalChartInstance) {
                modalChartInstance.destroy();
            }

            modalChartInstance = new Chart(document.getElementById("modalChart").getContext("2d"), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: chartInfo.label,
                        data: chartInfo.data,
                        borderColor: chartInfo.color,
                        backgroundColor: chartInfo.color + '22',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true
                }
            });

            // Uyarı göster
            const warningText = getHealthWarning(type, lastValue);
            document.getElementById("healthWarning").innerText = warningText;

            // Modal göster
            new bootstrap.Modal(document.getElementById("graphModal")).show();
        }

        function getHealthWarning(type, value) {
            switch (type) {
                case "glucose":
                    return value > 140 ? "⚠️ Glukoz seviyesi yüksek!" : "";
                case "bmi":
                    return value > 30 ? "⚠️ Obezite riski var." : "";
                case "hba":
                    return value > 6.5 ? "⚠️ Diyabet riski mevcut." : "";
                case "weight":
                    return value > 100 ? "⚠️ Kilo sınırı yüksek olabilir." : "";
                case "pre":
                    return value === 1 ? "⚠️ Yapay zeka: Sonuçlara göre diyabetsiniz. Doktorunuz ile görüşün." : "";
                default:
                    return "";
            }
        }
    </script>

} 


<style>
    .chart-card {
        border-radius: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        padding: 1.5rem;
        margin-bottom: 2rem;
        background: #ffffff;
        transition: transform 0.2s;
    }

        .chart-card:hover {
            transform: translateY(-3px);
        }

    .chart-title {
        font-weight: 600;
        margin-bottom: 1rem;
        text-align: center;
    }

   /*  body{
        background: url("/img/Spor-ve-Teknoloji-Iliskisi-Antrenmanlarinizi-Guclendiren-Teknolojiler.jpg");
    } */
</style> 